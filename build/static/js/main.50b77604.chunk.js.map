{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Sort/index.js","App.js","serviceWorker.js","index.js"],"names":["InfoCard","props","className","alt","name","src","image","occupation","contact","Wrapper","children","Navbar","Sort","placeholder","type","value","search","onChange","handleInputChange","id","onClick","sortName","sortOccupation","App","state","employees","aToZ","event","console","log","target","setState","currentEmployees","sort","a","b","toLowerCase","filteredEmployees","this","filter","employee","indexOf","map","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50b77604.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction InfoCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <h3 className=\"name\">{props.name}</h3>\r\n          </li>\r\n          <li>\r\n            <strong>Occupation:</strong> {props.occupation}<strong>Contact:</strong> {props.contact}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\n\r\nfunction Navbar() {\r\n  return <div className={\"col-12 bg-light mb-3\"}>\r\n    <h1 className={\"text-center\"}>Employee Directory</h1>\r\n    </div>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport 'bootstrap';\r\n\r\nfunction Sort(props) {\r\n  return (\r\n      <div className=\"md-form mt-0 mx-auto bg-light\">\r\n        <input placeholder=\"Search an Employee\" className=\"form-control\" \r\n        type=\"text\" value={props.search} onChange={props.handleInputChange} name=\"search\" id=\"search\"></input>\r\n        <h3 className=\"mx-auto\">Sort By Category:</h3>\r\n        <div>\r\n            <button className=\"btn btn-outline-primary ml-4\" type=\"button\" onClick={props.sortName}>\r\n            A-Z\r\n            </button>\r\n            <button className=\"btn btn-outline-primary ml-4\" type=\"button\" onClick={props.sortOccupation}>\r\n            Occupation\r\n            </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Sort;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Sort from \"./components/Sort\";\nimport employees from \"./employees.json\";\n\nclass App extends Component {\n\n  state = {\n    search: \"\",\n    employees,\n    aToZ: true\n  };\n\n  handleInputChange = event => {\n    console.log(event.target.value);\n    this.setState({ search: event.target.value });\n  };\n\n  sortName = () => {\n    let currentEmployees = this.state.employees\n    if (this.state.aToZ === true) {\n      currentEmployees.sort(function(a,b) {\n        if(a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n        return 0;\n      })\n      this.setState({ employees: currentEmployees ,  aToZ: false });\n    }\n    else {\n      currentEmployees.sort(function(a,b) {\n        if(a.name.toLowerCase() > b.name.toLowerCase()) return -1;\n        return 0;\n      })\n      this.setState({ employees: currentEmployees ,  aToZ: true });\n    }\n  }\n\n  sortOccupation = () => {\n    let currentEmployees = this.state.employees\n    if (this.state.aToZ === true) {\n      currentEmployees.sort(function(a,b) {\n        if(a.occupation.toLowerCase() < b.occupation.toLowerCase()) return -1;\n        return 0;\n      })\n      this.setState({ employees: currentEmployees ,  aToZ: false });\n    }\n    else {\n      currentEmployees.sort(function(a,b) {\n        if(a.occupation.toLowerCase() > b.occupation.toLowerCase()) return -1;\n        return 0;\n      })\n      this.setState({ employees: currentEmployees ,  aToZ: true });\n    }\n  }\n  \n  render() {\n    const filteredEmployees = this.state.employees.filter((employee) => { \n      return employee.name.indexOf(this.state.search) !== -1;\n    })\n\n    return (\n      <Wrapper>\n        <Navbar />\n        <hr />\n        <Sort\n          handleInputChange={this.handleInputChange}\n          sortName={this.sortName}\n          sortOccupation={this.sortOccupation}\n          search={this.state.search}\n        >\n        </Sort>\n        {filteredEmployees.map(employee => (\n          <Card\n            id={employee.id}\n            key={employee.id}\n            name={employee.name}\n            image={employee.image}\n            occupation={employee.occupation}\n            contact={employee.contact}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}